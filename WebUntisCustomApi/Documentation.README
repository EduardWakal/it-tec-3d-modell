Dokumentation für Typescript und Node.js

Diese Anwendung verbindet sich mit der Untis-API und ruft den eigenen Stundenplan ab. Die Daten werden dann in einer MongoDB-Datenbank gespeichert. Anschließend gibt es eine weitere Funktion, die die gespeicherten Daten liest und einen Endpunkt mit Express.js erzeugt.
Verwendete Bibliotheken

    Express: Express ist ein minimales und flexibles Node.js-Webanwendung-Framework, das eine robuste Reihe von Funktionen für Web- und Mobilanwendungen bietet.

    MongoDB: MongoDB ist eine Quelle-zu-Quelle-Datenbank, die Entwicklern bei der Arbeit mit Anwendungen hilft.

    WebUntis API Client: Das ist ein Modul, das eine vereinfachte Verbindung zur WebUntis-API bietet.

    dotenv: Dotenv ist eine Zero-Dependency-Modul, das .env-Dateien lädt Variablen in process.env.

Code Erklärung

    Der Code beginnt mit dem Importieren aller erforderlichen Module und dem Initialisieren einer neuen Instanz von WebUntis und MongoClient.

    Dann wird die Express-Anwendung erstellt.

    Es gibt zwei Routen in dieser Anwendung: /write-data und /read-data.
        Bei einem GET-Anfrage an /write-data:
            Die Anwendung loggt sich in Untis ein und ruft den eigenen Stundenplan für den Tag ab.
            Die Anwendung stellt eine Verbindung zu MongoDB her und schreibt den Stundenplan in eine Sammlung namens "untis".
            Nachdem die Daten geschrieben wurden, wird die Verbindung zur Datenbank geschlossen und eine Nachricht an den Client gesendet, dass die Daten erfolgreich geschrieben wurden.
        Bei einem GET-Anfrage an /read-data:
            Die Anwendung stellt eine Verbindung zu MongoDB her und liest die Daten aus der Sammlung "untis".
            Nachdem die Daten gelesen wurden, wird die Verbindung zur Datenbank geschlossen und die Daten werden an den Client gesendet.

    Schließlich wird die Express-Anwendung auf Port 3000 gestartet.

Umgebungsvariablen

Die Anwendung verwendet folgende Umgebungsvariablen:

    USERNAME und PASSWORD: Die Anmeldedaten für WebUntis.
    MONGO_DB_NAME: Der Name der MongoDB-Datenbank, in die die Daten geschrieben werden sollen.

SSL-Zertifikat

Das SSL-Zertifikat (cert.pem) wird verwendet, um eine sichere Verbindung zu MongoDB herzustellen.





Arduino Dokumentation
Verwendete Bibliotheken

Dieser Code verwendet mehrere Bibliotheken:

    Arduino.h: Standardbibliothek für Arduino.
    WiFi.h: Ermöglicht die Kommunikation mit WiFi-Netzwerken.
    WiFiClientSecure.h: Ermöglicht sichere Kommunikation über SSL/TLS mit einem Remote-Server.
    ArduinoHttpClient.h: Ermöglicht das Senden von HTTP-Anfragen an einen Server.
    ArduinoJson.h: Eine Bibliothek, die es ermöglicht, mit JSON zu arbeiten.
    epd_driver.h: Ermöglicht die Ansteuerung eines E-Paper-Displays.
    esp_adc_cal.h: Enthält Funktionen zur Kalibrierung des ADC (Analog-Digital-Umsetzer).
    FS.h: Erlaubt den Zugriff auf das Dateisystem.
    SPI.h: Erlaubt die Kommunikation über die SPI-Schnittstelle.
    SD.h: Ermöglicht die Interaktion mit SD-Karten.
    firasans.h: Die Fira Sans Schriftart.

Code Erklärung

Der Code konfiguriert eine Verbindung zu einem WiFi-Netzwerk und einem Server, um Daten von der WebUntis-Plattform abzurufen. Anschließend stellt er eine Verbindung zum Netzwerk her und startet eine Session mit WebUntis.

    Verbindung mit dem WiFi-Netzwerk: In der setup() Funktion wird eine Verbindung zum WiFi-Netzwerk hergestellt. Die SSID und das Passwort sind als Konstanten am Anfang des Codes definiert.

    Start einer Session mit WebUntis: Nachdem eine WiFi-Verbindung hergestellt wurde, wird die Funktion authenticate() aufgerufen, um eine Session mit der WebUntis-Plattform zu starten. Diese Funktion sendet eine HTTP-POST-Anfrage an den WebUntis-Server, um sich zu authentifizieren und eine Session zu starten.

    Abrufen des Stundenplans: Nach erfolgreicher Authentifizierung wird die Funktion getTimetable() aufgerufen. Diese Funktion sendet eine weitere HTTP-POST-Anfrage an den WebUntis-Server, um den Stundenplan abzurufen.

Wichtige Funktionen

    authenticate(): Diese Funktion erstellt ein JSON-Dokument und sendet es an den WebUntis-Server, um sich zu authentifizieren und eine Sitzung zu starten. Nachdem die Anfrage gesendet wurde, liest die Funktion die Antwort, extrahiert die Sitzungs-ID und speichert sie.

    getTimetable(): Diese Funktion erstellt ein weiteres JSON-Dokument und sendet es an den WebUntis-Server, um den Stundenplan abzurufen. Es verwendet die in der authenticate() Funktion erhaltene Sitzungs-ID als Teil des Cookie-Headers.

Umgebungsvariablen

Die Anwendung verwendet folgende Umgebungsvariablen:

    ssid und password: Die Anmeldedaten für Ihr WLAN.
    server, endpoint und port: Die Anmeldedaten für den WebUntis-Server.

Bitte stellen Sie sicher, dass Sie alle sensiblen Informationen wie Passwörter und Schlüssel sicher aufbewahren und nicht in Ihrem Code hart codieren. Es ist empfehlenswert, diese in einer separaten Konfigurationsdatei oder als Umgebungsvariablen zu speichern, um die Sicherheit zu erhöhen.
User
